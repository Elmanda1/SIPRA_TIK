generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username          String    @id @db.VarChar(50) // NIM mahasiswa atau kode dosen
  password          String    @db.VarChar(100)
  role              Role      @default(mahasiswa)
  isVerified        Boolean   @default(false)
  verificationToken String?   @db.VarChar(255)
  resetToken        String?   @db.VarChar(255)
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())

  // Auth Relations
  sessions          Session[]

  // Profile Relations (One-to-One)
  mahasiswa         Mahasiswa? @relation("UserMahasiswa")
  dosen             Dosen?     @relation("UserDosen")

  // App Relations
  barang            inven_barang[]  @relation("UserBarang")
  ruangan           inven_ruangan[] @relation("UserRuangan")
  pinjam            peminjaman[]    @relation("UserPinjam")
}

model Mahasiswa {
  nim       String  @id @db.VarChar(20) // Primary key
  nama      String  @db.VarChar(200)
  email     String  @unique @db.VarChar(255)
  foto      String? @db.VarChar(500) // Google Drive URL/ID
  phone     String? @db.VarChar(20)
  prodi     String  @db.VarChar(100)
  alamat    String? @db.VarChar(255)
  kota      String? @db.VarChar(100)
  provinsi  String? @db.VarChar(100)
  angkatan  Int
  kelas     String? @db.VarChar(50)
  createdAt DateTime @default(now())

  // Relation to User (username menggunakan nim ini)
  user      User    @relation("UserMahasiswa", fields: [nim], references: [username])
}

model Dosen {
  kode_dosen String  @id @db.VarChar(20) // Primary key
  nama       String  @db.VarChar(200)
  email      String  @unique @db.VarChar(255)
  foto       String? @db.VarChar(500) // Google Drive URL/ID
  phone      String? @db.VarChar(20)
  fakultas   String  @db.VarChar(100)
  prodi      String  @db.VarChar(100)
  jabatan    String? @db.VarChar(100)
  createdAt  DateTime @default(now())

  user       User    @relation("UserDosen", fields: [kode_dosen], references: [username])
}

model inven_barang {
  id_barang   Int          @id @default(autoincrement())
  nama_barang String       @db.VarChar(255)
  kategori    String       @db.VarChar(100)
  jml_barang  Int
  lokasi      String?      @db.VarChar(100)
  kondisi     String?      @db.VarChar(100) // baik, rusak ringan, rusak berat
  foto        String?      @db.VarChar(500) // Google Drive URL/ID
  status      statusInven  @default(tersedia)
  keterangan  String?      @db.Text
  username    String?      @db.VarChar(50) // PIC barang
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User?        @relation("UserBarang", fields: [username], references: [username])
  pinjam      peminjaman[] @relation("BarangPinjam")
}

model Session {
  id            Int      @id @default(autoincrement())
  username      String   @db.VarChar(50)
  refreshToken  String   @db.VarChar(500)
  userAgent     String?  @db.VarChar(255)
  ipAddress     String?  @db.VarChar(100)
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  user          User     @relation(fields: [username], references: [username])
}

model inven_ruangan {
  nama_ruangan String       @id @db.VarChar(50)
  nama_gedung  String       @db.VarChar(255)
  foto         String?      @db.VarChar(500)
  status       statusInven  @default(tersedia)
  keterangan   String?      @db.Text
  username     String?      @db.VarChar(50)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user         User?        @relation("UserRuangan", fields: [username], references: [username])
  pinjam       peminjaman[] @relation("RuanganPinjam")
}

model peminjaman {
  id_peminjaman        Int              @id @default(autoincrement())
  tanggal_pengajuan    DateTime         @default(now())
  tanggal_peminjaman   DateTime
  tanggal_pengembalian DateTime
  keperluan            String           @db.Text
  status               statusPeminjaman @default(pending)
  catatan_admin        String?          @db.Text
  catatan_pengembalian String?          @db.Text
  username             String           @db.VarChar(50) // Peminjam
  id_barang            Int?
  nama_ruangan         String?          @db.VarChar(50)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  penalty              Int?             @default(0)

  barang               inven_barang?    @relation("BarangPinjam", fields: [id_barang], references: [id_barang])
  ruangan              inven_ruangan?   @relation("RuanganPinjam", fields: [nama_ruangan], references: [nama_ruangan])
  user                 User             @relation("UserPinjam", fields: [username], references: [username])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    String   @db.VarChar(50)
  action    String
  timestamp DateTime @default(now())
  details   String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String   @db.VarChar(50)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @db.VarChar(50)
  theme     String?  @default("light")
  twoFA     Boolean? @default(false)
  // Tambahkan field lain sesuai kebutuhan
}

enum Role {
  admin
  dosen
  mahasiswa
}

enum statusInven {
  tersedia
  dipinjam
  maintenance
}

enum statusPeminjaman {
  pending
  diterima
  ditolak
  selesai
  terlambat
}